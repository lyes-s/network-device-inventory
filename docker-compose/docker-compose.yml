version: '3.9'
services:
  postgres:
    image: postgres:latest
    container_name: postgreSQL
    restart: on-failure
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    healthcheck:
      test: pg_isready -d ${POSTGRES_DB} -U ${POSTGRES_USER}
      timeout: 45s
      interval: 10s
      retries: 10
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - microservice

  flyway:
    image: flyway/flyway:latest
    container_name: flyway
    command: -locations=filesystem:/flyway/sql -connectRetries=60 migrate
    environment:
      FLYWAY_USER: ${POSTGRES_USER}
      FLYWAY_PASSWORD: ${POSTGRES_PASSWORD}
      FLYWAY_URL: ${POSTGRES_URL}
    volumes:
      - ./flyway/sql_versions:/flyway/sql
    depends_on:
      - postgres
    networks:
      - microservice

  network-device-inventory:
    image: lsefiane/network-device-inventory:latest
    container_name: network-device-inventory
    restart: on-failure
    ports:
      - ${NETWORK_DEVICE_INVENTORY_PORT}:${NETWORK_DEVICE_INVENTORY_PORT}
    healthcheck:
      test: wget --no-verbose --spider http://localhost:8080/inventory/api/actuator/health || exit 1
      interval: 25s
      timeout: 3s
      retries: 3
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      SPRING_JPA_DATABASE_PLATFORM: ${SPRING_JPA_DATABASE_PLATFORM}
      SPRING_DATASOURCE_URL: ${SPRING_DATASOURCE_URL}
      SPRING_DATASOURCE_DRIVERCLASSNAME: ${SPRING_DATASOURCE_DRIVERCLASSNAME}
      SPRING_DATASOURCE_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      SPRING_DATASOURCE_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      SPRING_DATASOURCE_INITIALIZATION_MODE: ${SPRING_DATASOURCE_INITIALIZATION_MODE}
    depends_on:
      - postgres
      - consul
    networks:
      - microservice

  consul:
    image: consul:latest
    container_name: consul
    command: agent -server -ui -node=server-1 -bootstrap-expect=1 -client=0.0.0.0
    restart: always
    ports:
      - ${CONSUL_PORT}:${CONSUL_PORT}
    networks:
      - microservice
    environment:
      - CONSUL_BIND_INTERFACE=${CONSUL_BIND_INTERFACE}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    volumes:
      - ../prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    depends_on:
      - node-exporter
      - postgres-exporter
      - cadvisor
      - alertmanager
      - consul
    networks:
      - microservice

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    ports:
      - ${ALERT_MANAGER_PORT}:${ALERT_MANAGER_PORT}
    volumes:
      - ../alertmanager:/etc/alertmanager
      - alertmanager-data:/data
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--log.level=debug'
    networks:
      - microservice


  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    restart: on-failure
    ports:
      - ${NODE_EXPORTER_PORT}:${NODE_EXPORTER_PORT}
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - microservice

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: on-failure
    ports:
      - ${CADVISOR_HOST_PORT}:${CADVISOR_CONTAINER_PORT}
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - microservice

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    restart: on-failure
    ports:
      - ${POSTGRES_EXPORTER_PORT}:${POSTGRES_EXPORTER_PORT}
    depends_on:
      - postgres
    environment:
      DATA_SOURCE_USER: ${POSTGRES_USER}
      DATA_SOURCE_PASS: ${POSTGRES_PASSWORD}
      DATA_SOURCE_URI: ${POSTGRES_URL}
    networks:
      - microservice

volumes:
  pgdata:
  prometheus-data:
  alertmanager-data:

networks:
  microservice: