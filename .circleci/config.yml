# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Partner Orb
orbs:
  snyk: snyk/snyk@1.1.2
  sonarcloud: sonarsource/sonarcloud@1.1.0

parameters:
  GHA_Actor:
    type: string
    default: ""
  GHA_Action:
    type: string
    default: ""
  GHA_Event:
    type: string
    default: ""
  GHA_Meta:
    type: string
    default: ""

executors:
  docker-publisher:
    docker:
      - image: cimg/node:18.2.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  inventory-service-sonarcloud:
    docker:
      - image: cimg/openjdk:11.0.13
    steps:
      - checkout
      - run:
          name: Analyze on SonarCloud
          command: mvn verify sonar:sonar -Dsonar.projectKey=$PROJECT_KEY -Dsonar.host.url=$HOST_URL -Dsonar.organization=$ORGANIZATION
  inventory-service-maven-build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/openjdk:11.0.13
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    working_directory: ~/network-device-inventory/network-device-inventory-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - restore_cache:
          key: network-device-inventory-service-{{ checksum "pom.xml" }}
      - run:
          name: mvn dependency go offline
          command: mvn dependency:go-offline
      - save_cache:
          paths:
            - ~/.m2
          key: network-device-inventory-service-{{ checksum "pom.xml" }}
      - run:
          name: mvn clean install
          command: mvn clean install
      - store_test_results:
          path: ~/network-device-inventory/network-device-inventory-service/target/surefire-reports
      - store_artifacts:
          path: ~/network-device-inventory/network-device-inventory-service/target/network-device-inventory-service-0.0.1-SNAPSHOT.jar
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: ~/network-device-inventory/network-device-inventory-service/target
          # Must be relative path from root
          paths:
            - network-device-inventory-service-0.0.1-SNAPSHOT.jar

  inventory-service-docker-build:
    executor: docker-publisher
    working_directory: ~/network-device-inventory/network-device-inventory-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: ~/network-device-inventory/network-device-inventory-service/target
      - run:
          name: Build Docker image
          command: docker build -t $CI_REGISTRY_USER/$NETWORK_DEVICE_INVENTORY_SERVICE:latest -t $CI_REGISTRY_USER/$NETWORK_DEVICE_INVENTORY_SERVICE:$CIRCLE_SHA1 .
      - run:
          name: Archive Docker image
          command: docker save --output network-device-inventory-service.tar $CI_REGISTRY_USER/$NETWORK_DEVICE_INVENTORY_SERVICE:latest $CI_REGISTRY_USER/$NETWORK_DEVICE_INVENTORY_SERVICE:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./network-device-inventory-service.tar

  inventory-service-snyk:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: .
      - snyk/scan:
          command: snyk container test docker-archive:network-device-inventory-service.tar
          severity-threshold: high
          fail-on-issues: true

  prometheus-service-docker-build:
    executor: docker-publisher
    working_directory: ~/network-device-inventory/prometheus-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t $CI_REGISTRY_USER/$PROMETHEUS_SERVICE:latest -t $CI_REGISTRY_USER/$PROMETHEUS_SERVICE:$CIRCLE_SHA1 .
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $CI_REGISTRY_USER/$PROMETHEUS_SERVICE:latest
          fail-on-issues: true
      - run:
          name: Archive Docker image(s)
          command: docker save --output prometheus-service.tar $CI_REGISTRY_USER/$PROMETHEUS_SERVICE:latest $CI_REGISTRY_USER/$PROMETHEUS_SERVICE:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./prometheus-service.tar

  grafana-service-docker-build:
    executor: docker-publisher
    working_directory: ~/network-device-inventory/grafana-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t $CI_REGISTRY_USER/$GRAFANA_SERVICE:latest -t $CI_REGISTRY_USER/$GRAFANA_SERVICE:$CIRCLE_SHA1 .
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $CI_REGISTRY_USER/$GRAFANA_SERVICE:latest
          fail-on-issues: true
      - run:
          name: Archive Docker image(s)
          command: docker save --output grafana-service.tar $CI_REGISTRY_USER/$GRAFANA_SERVICE:latest $CI_REGISTRY_USER/$GRAFANA_SERVICE:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./grafana-service.tar

  nginx-service-docker-build:
    executor: docker-publisher
    working_directory: ~/network-device-inventory/nginx-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t $CI_REGISTRY_USER/$NGINX_SERVICE:latest -t $CI_REGISTRY_USER/$NGINX_SERVICE:$CIRCLE_SHA1 .
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $CI_REGISTRY_USER/$NGINX_SERVICE:latest
          fail-on-issues: true
      - run:
          name: Archive Docker image(s)
          command: docker save --output nginx-service.tar $CI_REGISTRY_USER/$NGINX_SERVICE:latest $CI_REGISTRY_USER/$NGINX_SERVICE:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./nginx-service.tar

  flyway-service-docker-build:
    executor: docker-publisher
    working_directory: ~/network-device-inventory/flyway-service
    steps:
      - checkout:
          path: ~/network-device-inventory
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build Docker image
          command: docker build -t $CI_REGISTRY_USER/$FLYWAY_SERVICE:latest -t $CI_REGISTRY_USER/$FLYWAY_SERVICE:$CIRCLE_SHA1 .
      - snyk/scan:
          severity-threshold: high
          docker-image-name: $CI_REGISTRY_USER/$FLYWAY_SERVICE:latest
          fail-on-issues: true
      - run:
          name: Archive Docker image(s)
          command: docker save --output flyway-service.tar $CI_REGISTRY_USER/$FLYWAY_SERVICE:latest $CI_REGISTRY_USER/$FLYWAY_SERVICE:$CIRCLE_SHA1
      - persist_to_workspace:
          root: .
          paths:
            - ./flyway-service.tar

  docker-publish:
    executor: docker-publisher
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load Docker image(s)
          command: |
            for f in /tmp/workspace/*.tar; do
              cat $f | docker load
            done
      - run:
          name: Login to DockerHub
          command: |
            echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin
      - run:
          name: Publish Docker image(s)
          command: |
            for image_name in $(docker images --format="{{.Repository}}:{{.Tag}}")
            do
              docker push $image_name
            done
      - run:
          name: Logout from DockerHub
          command: docker logout
            


# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  network-device-inventory-development-workflow:
    jobs:
      - inventory-service-maven-build
      - inventory-service-docker-build:
          requires:
            - inventory-service-maven-build
      - inventory-service-snyk:
          requires:
            - inventory-service-docker-build
  network-device-inventory-release-workflow:
    jobs:
      - inventory-service-sonarcloud:
          context:
            - SonarCloud
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - inventory-service-maven-build:
          requires:
            - inventory-service-sonarcloud
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - inventory-service-docker-build:
          requires:
            - inventory-service-maven-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - prometheus-service-docker-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - grafana-service-docker-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - nginx-service-docker-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - flyway-service-docker-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - docker-publish:
          requires:
            - inventory-service-docker-build
            - prometheus-service-docker-build
            - grafana-service-docker-build
            - nginx-service-docker-build
            - flyway-service-docker-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/